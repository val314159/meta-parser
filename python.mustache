from prelude import *
{{#arr}}

{{#rule_and}}
def get_{{#rname}}{{#id}}{{tok}}{{/id}}{{/rname}}(c): # AND
  c0=c;r0={}

{{#terms}}
{{#arr}}
{{#id}}
  r, c = get_{{#id}}{{tok}}{{/id}}(c) #&
  if 'err' in r:
    return r,c0 # fail
  r0['{{#id}}{{tok}}{{/id}}'] = r
{{/id}}
{{#str_url_encoded}}
  r, c = get_xstr(c, "{{#str_url_encoded}}{{{str}}}{{/str_url_encoded}}") #&
  if 'err' in r:
    return r,c0 # fail
{{/str_url_encoded}}

{{/arr}}
{{/terms}}
  return r0,c # succeed
{{/rule_and}}{{#rule_or}}
def get_{{#rname}}{{#id}}{{tok}}{{/id}}{{/rname}}(c): # OR  
  c0=c;r0={}

{{#terms}}
{{#arr}}
{{#id}}
  r, c = get_{{#id}}{{tok}}{{/id}}(c) #|
  if 'err' not in r:
    r0['{{#id}}{{tok}}{{/id}}'] = r
    return r0,c # succeed
{{/id}}
{{#str_url_encoded}}
  r, c = get_xstr(c, "{{#str_url_encoded}}{{{str}}}{{/str_url_encoded}}") #|
  if 'err' not in r:
    return r0,c # succeed
{{/str_url_encoded}}

{{/arr}}
{{/terms}}
  return r,c0 # fail
{{/rule_or}}{{#rule_arr}}
def get_{{#rname}}{{#id}}{{tok}}{{/id}}{{/rname}}(c): # ARR
  c0=c;r0={'arr':[]}
  while 1:

{{#terms}}
{{#arr}}
{{#id}}
    r, c = get_{{#id}}{{tok}}{{/id}}(c) #*
{{/id}}
{{#str_url_encoded}}
    r, c = get_xstr(c, "{{#str_url_encoded}}{{{str}}}{{/str_url_encoded}}") #*
{{/str_url_encoded}}
    if 'err' in r:
      break
    r0['arr'].append(r)
    c0=c
{{/arr}}
{{/terms}}
  return r0,c0
{{/rule_arr}}{{/arr}}

rules, c = get_rules(0)
print json.dumps( rules )
